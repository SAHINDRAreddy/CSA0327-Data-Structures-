[08:23, 8/4/2023] +91 79951 52323: #include <stdio.h>
void merge(int arr[], int p, int q, int r) {
  int n1 = q - p + 1;
  int n2 = r - q;
  int L[n1], M[n2];

  for (int i = 0; i < n1; i++)
    L[i] = arr[p + i];
  for (int j = 0; j < n2; j++)
    M[j] = arr[q + 1 + j];

  int i, j, k;
  i = 0;
  j = 0;
  k = p;

  while (i < n1 && j < n2) {
    if (L[i] <= M[j]) {
      arr[k] = L[i];
      i++;
    } else {
      arr[k] = M[j];
      j++;
    }
    k++;
  }

  while (i < n1) {
    arr[k] = L[i];
    i++;
    k++;
  }

  while (j < n2) {
    arr[k] = M[j];
    j++;
    k++;
  }
}
void mergeSort(int arr[], int l, int r) {
  if (l < r) {
    int m = l + (r - l) / 2;

    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);
    merge(arr, l, m, r);
  }
}
void printArray(int arr[], int size) {
  for (int i = 0; i < size; i++)
    printf("%d ", arr[i]);
  printf("\n");
}
int main() {
  int arr[] = {6, 5, 12, 10, 9, 1};
  int size = sizeof(arr) / sizeof(arr[0]);

  mergeSort(arr, 0, size - 1);

  printf("Sorted array: \n");
  printArray(arr, size);
}
[08:23, 8/4/2023] +91 79951 52323: Merge sort
[08:24, 8/4/2023] +91 79951 52323: #include<stdio.h>
void heapify(int*,int, int);
void heapsort(int*, int);
void print_array(int*, int);
int main()
{
    int arr[] = { 10, 30, 5, 63, 22, 12, 56, 33 };
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("\nArray before sorting:\n");
    print_array(arr, n);
    heapsort(arr, n);
    printf("\n\nArray after sorting:\n");
    print_array(arr, n);
    return 0;
}
void heapsort(int* arr, int n)
{
    for (int i = n / 2 - 1; i >= 0; i--)
    {
        heapify(arr, n, i);
    }

    // sort the max heap
    for (int i = n - 1; i >= 0; i--)
    {
        int temp = arr[i];
        arr[i] = arr[0];
        arr[0] = temp;
        heapify(arr, i, 0);
    }
}
void heapify(int* arr, int n, int i)
{
    int largest = i;
    int left = 2 * i + 1;
    int right  = 2 * i + 2;
    if (left < n && arr[left] > arr[largest])
    {
        largest = left;
    }

    if (right < n && arr[right] > arr[largest])
    {
        largest = right;
    }
    if (largest != i)
    {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapify(arr, n, largest);
    }
}

void print_array(int* arr, int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("%d  ", arr[i]);
    }
}
[08:24, 8/4/2023] +91 79951 52323: Heal sort
[08:25, 8/4/2023] +91 79951 52323: #include<stdio.h>
void quickSort(int[], int, int);
int  partition(int[], int, int);
void swap(int*, int*);
int main()
{
    int n,i;
    printf("Enter Array Size\n");
    scanf("%d",&n);
    int arr[n];
    printf("Enter Array Elements\n");
    for(i=0;i<n;i++)
	scanf("%d",&arr[i]);
    quickSort(arr,0,n-1);
    printf("After the QuickSort\n");
    for(i=0;i<n;i++)
	printf("%d ",arr[i]);
    printf("\n");
    return 0;
}
void quickSort(int arr[], int start, int end)
{
    if(start < end)
    {
        int pIndex = partition(arr, start, end);
        quickSort(arr, start, pIndex-1);
        quickSort(arr, pIndex+1, end);
    }
}
int partition(int arr[], int start, int end)
{
    int pIndex = start;
    int pivot = arr[end];
    int i;
    for(i = start; i < end; i++)
    {
        if(arr[i] < pivot)
        {
            swap(&arr[i], &arr[pIndex]);
            pIndex++;
        }
    }
    swap(&arr[end], &arr[pIndex]);
    return pIndex;
}
void swap(int *x, int *y)
{
    int t = *x;
    *x = *y;
    *y = t;
}
